[
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamSpWf",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferMemory:Memory_32/ramsSpWf:RamSpWf",
    "index":0.512
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_32",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferMemory:Memory_32",
    "index":0.52
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamSpWf_1",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferShadowMemory:Memory_32/ramsSpWf:RamSpWf",
    "index":0.528
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_33",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferShadowMemory:Memory_32",
    "index":0.536
  },
  {
    "class":"firrtl.EmitCircuitAnnotation",
    "emitter":"firrtl.VerilogEmitter"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_57",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_56",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_55",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_54",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_53",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_52",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_51",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_50",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_49",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_48",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_47",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_46",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_45",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_44",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_43",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_42",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_41",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_40",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_39",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_38",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_37",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_36",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_35",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_34",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_33",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_32",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamSpWf",
    "name":"RamSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8;\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_31",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_30",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_29",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_28",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_27",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_26",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_25",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_24",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_23",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_22",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_21",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_20",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_19",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_18",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_17",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_16",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_15",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_14",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_13",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_12",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_11",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_10",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_9",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_8",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_7",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_6",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_5",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_4",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_3",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_2",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_1",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxTargetDirAnno",
    "targetDir":"."
  }
]