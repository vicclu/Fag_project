[
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_0:Memory/ramsSpWf:RamInitSpWf",
    "index":0.0
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_0:Memory",
    "index":0.00273224043715847
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_1",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_1:Memory_1/ramsSpWf:RamInitSpWf_1",
    "index":0.00546448087431694
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_1",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_1:Memory_1",
    "index":0.00819672131147541
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_2",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_2:Memory_2/ramsSpWf:RamInitSpWf_2",
    "index":0.01092896174863388
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_2",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_2:Memory_2",
    "index":0.01366120218579235
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_3",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_3:Memory_3/ramsSpWf:RamInitSpWf_3",
    "index":0.01639344262295082
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_3",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_3:Memory_3",
    "index":0.01912568306010929
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_4",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_4:Memory_4/ramsSpWf:RamInitSpWf_4",
    "index":0.02185792349726776
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_4",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_4:Memory_4",
    "index":0.02459016393442623
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_5",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_5:Memory_5/ramsSpWf:RamInitSpWf_5",
    "index":0.0273224043715847
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_5",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_5:Memory_5",
    "index":0.030054644808743168
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_6",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_6:Memory_6/ramsSpWf:RamInitSpWf_6",
    "index":0.03278688524590164
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_6",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_6:Memory_6",
    "index":0.03551912568306011
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_7",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_7:Memory_7/ramsSpWf:RamInitSpWf_7",
    "index":0.03825136612021858
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_7",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_7:Memory_7",
    "index":0.040983606557377046
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_8",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_8:Memory_8/ramsSpWf:RamInitSpWf_8",
    "index":0.04371584699453552
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_8",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_8:Memory_8",
    "index":0.04644808743169399
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_9",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_9:Memory_9/ramsSpWf:RamInitSpWf_9",
    "index":0.04918032786885246
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_9",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_9:Memory_9",
    "index":0.05191256830601093
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_10",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_10:Memory_10/ramsSpWf:RamInitSpWf_10",
    "index":0.0546448087431694
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_10",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_10:Memory_10",
    "index":0.05737704918032787
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_11",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_11:Memory_11/ramsSpWf:RamInitSpWf_11",
    "index":0.060109289617486336
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_11",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_11:Memory_11",
    "index":0.06284153005464481
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_12",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_12:Memory_12/ramsSpWf:RamInitSpWf_12",
    "index":0.06557377049180328
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_12",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_12:Memory_12",
    "index":0.06830601092896176
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_13",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_13:Memory_13/ramsSpWf:RamInitSpWf_13",
    "index":0.07103825136612021
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_13",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_13:Memory_13",
    "index":0.07377049180327869
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_14",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_14:Memory_14/ramsSpWf:RamInitSpWf_14",
    "index":0.07650273224043716
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_14",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_14:Memory_14",
    "index":0.07923497267759563
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_15",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_15:Memory_15/ramsSpWf:RamInitSpWf_15",
    "index":0.08196721311475409
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_15",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_15:Memory_15",
    "index":0.08469945355191257
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_16",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_16:Memory_16/ramsSpWf:RamInitSpWf_16",
    "index":0.08743169398907104
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_16",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_16:Memory_16",
    "index":0.09016393442622951
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_17",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_17:Memory_17/ramsSpWf:RamInitSpWf_17",
    "index":0.09289617486338798
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_17",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_17:Memory_17",
    "index":0.09562841530054644
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_18",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_18:Memory_18/ramsSpWf:RamInitSpWf_18",
    "index":0.09836065573770492
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_18",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_18:Memory_18",
    "index":0.10109289617486339
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_19",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_19:Memory_19/ramsSpWf:RamInitSpWf_19",
    "index":0.10382513661202186
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_19",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_19:Memory_19",
    "index":0.10655737704918032
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_20",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_20:Memory_20/ramsSpWf:RamInitSpWf_20",
    "index":0.1092896174863388
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_20",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_20:Memory_20",
    "index":0.11202185792349727
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_21",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_21:Memory_21/ramsSpWf:RamInitSpWf_21",
    "index":0.11475409836065574
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_21",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_21:Memory_21",
    "index":0.11748633879781421
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_22",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_22:Memory_22/ramsSpWf:RamInitSpWf_22",
    "index":0.12021857923497267
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_22",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_22:Memory_22",
    "index":0.12295081967213115
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_23",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_23:Memory_23/ramsSpWf:RamInitSpWf_23",
    "index":0.12568306010928962
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_23",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_23:Memory_23",
    "index":0.1284153005464481
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_24",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_24:Memory_24/ramsSpWf:RamInitSpWf_24",
    "index":0.13114754098360656
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_24",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_24:Memory_24",
    "index":0.13387978142076504
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_25",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_25:Memory_25/ramsSpWf:RamInitSpWf_25",
    "index":0.1366120218579235
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_25",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_25:Memory_25",
    "index":0.13934426229508196
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_26",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_26:Memory_26/ramsSpWf:RamInitSpWf_26",
    "index":0.14207650273224043
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_26",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_26:Memory_26",
    "index":0.1448087431693989
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_27",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_27:Memory_27/ramsSpWf:RamInitSpWf_27",
    "index":0.14754098360655737
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_27",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_27:Memory_27",
    "index":0.15027322404371585
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_28",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_28:Memory_28/ramsSpWf:RamInitSpWf_28",
    "index":0.15300546448087432
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_28",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_28:Memory_28",
    "index":0.1557377049180328
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_29",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_29:Memory_29/ramsSpWf:RamInitSpWf_29",
    "index":0.15846994535519127
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_29",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_29:Memory_29",
    "index":0.16120218579234974
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_30",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_30:Memory_30/ramsSpWf:RamInitSpWf_30",
    "index":0.16393442622950818
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_30",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_30:Memory_30",
    "index":0.16666666666666666
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_31",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_31:Memory_31/ramsSpWf:RamInitSpWf_31",
    "index":0.16939890710382513
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_31",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_0_31:Memory_31",
    "index":0.1721311475409836
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_32",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_0:Memory/ramsSpWf:RamInitSpWf",
    "index":0.17486338797814208
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_32",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_0:Memory",
    "index":0.17759562841530055
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_33",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_1:Memory_1/ramsSpWf:RamInitSpWf_1",
    "index":0.18032786885245902
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_33",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_1:Memory_1",
    "index":0.1830601092896175
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_34",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_2:Memory_2/ramsSpWf:RamInitSpWf_2",
    "index":0.18579234972677597
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_34",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_2:Memory_2",
    "index":0.1885245901639344
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_35",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_3:Memory_3/ramsSpWf:RamInitSpWf_3",
    "index":0.1912568306010929
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_35",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_3:Memory_3",
    "index":0.19398907103825136
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_36",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_4:Memory_4/ramsSpWf:RamInitSpWf_4",
    "index":0.19672131147540983
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_36",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_4:Memory_4",
    "index":0.1994535519125683
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_37",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_5:Memory_5/ramsSpWf:RamInitSpWf_5",
    "index":0.20218579234972678
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_37",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_5:Memory_5",
    "index":0.20491803278688525
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_38",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_6:Memory_6/ramsSpWf:RamInitSpWf_6",
    "index":0.20765027322404372
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_38",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_6:Memory_6",
    "index":0.2103825136612022
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_39",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_7:Memory_7/ramsSpWf:RamInitSpWf_7",
    "index":0.21311475409836064
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_39",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_7:Memory_7",
    "index":0.21584699453551912
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_40",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_8:Memory_8/ramsSpWf:RamInitSpWf_8",
    "index":0.2185792349726776
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_40",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_8:Memory_8",
    "index":0.22131147540983606
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_41",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_9:Memory_9/ramsSpWf:RamInitSpWf_9",
    "index":0.22404371584699453
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_41",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_9:Memory_9",
    "index":0.226775956284153
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_42",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_10:Memory_10/ramsSpWf:RamInitSpWf_10",
    "index":0.22950819672131148
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_42",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_10:Memory_10",
    "index":0.23224043715846995
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_43",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_11:Memory_11/ramsSpWf:RamInitSpWf_11",
    "index":0.23497267759562843
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_43",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_11:Memory_11",
    "index":0.23770491803278687
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_44",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_12:Memory_12/ramsSpWf:RamInitSpWf_12",
    "index":0.24043715846994534
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_44",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_12:Memory_12",
    "index":0.24316939890710382
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_45",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_13:Memory_13/ramsSpWf:RamInitSpWf_13",
    "index":0.2459016393442623
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_45",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_13:Memory_13",
    "index":0.24863387978142076
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_46",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_14:Memory_14/ramsSpWf:RamInitSpWf_14",
    "index":0.25136612021857924
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_46",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_14:Memory_14",
    "index":0.2540983606557377
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_47",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_15:Memory_15/ramsSpWf:RamInitSpWf_15",
    "index":0.2568306010928962
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_47",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_15:Memory_15",
    "index":0.25956284153005466
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_48",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_16:Memory_16/ramsSpWf:RamInitSpWf_16",
    "index":0.26229508196721313
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_48",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_16:Memory_16",
    "index":0.2650273224043716
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_49",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_17:Memory_17/ramsSpWf:RamInitSpWf_17",
    "index":0.2677595628415301
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_49",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_17:Memory_17",
    "index":0.27049180327868855
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_50",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_18:Memory_18/ramsSpWf:RamInitSpWf_18",
    "index":0.273224043715847
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_50",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_18:Memory_18",
    "index":0.27595628415300544
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_51",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_19:Memory_19/ramsSpWf:RamInitSpWf_19",
    "index":0.2786885245901639
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_51",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_19:Memory_19",
    "index":0.2814207650273224
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_52",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_20:Memory_20/ramsSpWf:RamInitSpWf_20",
    "index":0.28415300546448086
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_52",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_20:Memory_20",
    "index":0.28688524590163933
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_53",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_21:Memory_21/ramsSpWf:RamInitSpWf_21",
    "index":0.2896174863387978
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_53",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_21:Memory_21",
    "index":0.2923497267759563
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_54",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_22:Memory_22/ramsSpWf:RamInitSpWf_22",
    "index":0.29508196721311475
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_54",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_22:Memory_22",
    "index":0.2978142076502732
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_55",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_23:Memory_23/ramsSpWf:RamInitSpWf_23",
    "index":0.3005464480874317
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_55",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_23:Memory_23",
    "index":0.30327868852459017
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_56",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_24:Memory_24/ramsSpWf:RamInitSpWf_24",
    "index":0.30601092896174864
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_56",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_24:Memory_24",
    "index":0.3087431693989071
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_57",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_25:Memory_25/ramsSpWf:RamInitSpWf_25",
    "index":0.3114754098360656
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_57",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_25:Memory_25",
    "index":0.31420765027322406
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_58",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_26:Memory_26/ramsSpWf:RamInitSpWf_26",
    "index":0.31693989071038253
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_58",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_26:Memory_26",
    "index":0.319672131147541
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_59",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_27:Memory_27/ramsSpWf:RamInitSpWf_27",
    "index":0.3224043715846995
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_59",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_27:Memory_27",
    "index":0.3251366120218579
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_60",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_28:Memory_28/ramsSpWf:RamInitSpWf_28",
    "index":0.32786885245901637
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_60",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_28:Memory_28",
    "index":0.33060109289617484
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_61",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_29:Memory_29/ramsSpWf:RamInitSpWf_29",
    "index":0.3333333333333333
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_61",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_29:Memory_29",
    "index":0.3360655737704918
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_62",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_30:Memory_30/ramsSpWf:RamInitSpWf_30",
    "index":0.33879781420765026
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_62",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_30:Memory_30",
    "index":0.34153005464480873
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_63",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_31:Memory_31/ramsSpWf:RamInitSpWf_31",
    "index":0.3442622950819672
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_63",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_1_31:Memory_31",
    "index":0.3469945355191257
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_64",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_0:Memory/ramsSpWf:RamInitSpWf",
    "index":0.34972677595628415
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_64",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_0:Memory",
    "index":0.3524590163934426
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_65",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_1:Memory_1/ramsSpWf:RamInitSpWf_1",
    "index":0.3551912568306011
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_65",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_1:Memory_1",
    "index":0.35792349726775957
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_66",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_2:Memory_2/ramsSpWf:RamInitSpWf_2",
    "index":0.36065573770491804
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_66",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_2:Memory_2",
    "index":0.3633879781420765
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_67",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_3:Memory_3/ramsSpWf:RamInitSpWf_3",
    "index":0.366120218579235
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_67",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_3:Memory_3",
    "index":0.36885245901639346
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_68",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_4:Memory_4/ramsSpWf:RamInitSpWf_4",
    "index":0.37158469945355194
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_68",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_4:Memory_4",
    "index":0.3743169398907104
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_69",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_5:Memory_5/ramsSpWf:RamInitSpWf_5",
    "index":0.3770491803278688
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_69",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_5:Memory_5",
    "index":0.3797814207650273
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_70",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_6:Memory_6/ramsSpWf:RamInitSpWf_6",
    "index":0.3825136612021858
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_70",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_6:Memory_6",
    "index":0.38524590163934425
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_71",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_7:Memory_7/ramsSpWf:RamInitSpWf_7",
    "index":0.3879781420765027
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_71",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_7:Memory_7",
    "index":0.3907103825136612
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_72",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_8:Memory_8/ramsSpWf:RamInitSpWf_8",
    "index":0.39344262295081966
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_72",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_8:Memory_8",
    "index":0.39617486338797814
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_73",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_9:Memory_9/ramsSpWf:RamInitSpWf_9",
    "index":0.3989071038251366
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_73",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_9:Memory_9",
    "index":0.4016393442622951
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_74",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_10:Memory_10/ramsSpWf:RamInitSpWf_10",
    "index":0.40437158469945356
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_74",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_10:Memory_10",
    "index":0.40710382513661203
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_75",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_11:Memory_11/ramsSpWf:RamInitSpWf_11",
    "index":0.4098360655737705
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_75",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_11:Memory_11",
    "index":0.412568306010929
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_76",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_12:Memory_12/ramsSpWf:RamInitSpWf_12",
    "index":0.41530054644808745
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_76",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_12:Memory_12",
    "index":0.4180327868852459
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_77",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_13:Memory_13/ramsSpWf:RamInitSpWf_13",
    "index":0.4207650273224044
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_77",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_13:Memory_13",
    "index":0.42349726775956287
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_78",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_14:Memory_14/ramsSpWf:RamInitSpWf_14",
    "index":0.4262295081967213
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_78",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_14:Memory_14",
    "index":0.42896174863387976
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_79",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_15:Memory_15/ramsSpWf:RamInitSpWf_15",
    "index":0.43169398907103823
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_79",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_15:Memory_15",
    "index":0.4344262295081967
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_80",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_16:Memory_16/ramsSpWf:RamInitSpWf_16",
    "index":0.4371584699453552
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_80",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_16:Memory_16",
    "index":0.43989071038251365
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_81",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_17:Memory_17/ramsSpWf:RamInitSpWf_17",
    "index":0.4426229508196721
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_81",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_17:Memory_17",
    "index":0.4453551912568306
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_82",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_18:Memory_18/ramsSpWf:RamInitSpWf_18",
    "index":0.44808743169398907
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_82",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_18:Memory_18",
    "index":0.45081967213114754
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_83",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_19:Memory_19/ramsSpWf:RamInitSpWf_19",
    "index":0.453551912568306
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_83",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_19:Memory_19",
    "index":0.4562841530054645
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_84",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_20:Memory_20/ramsSpWf:RamInitSpWf_20",
    "index":0.45901639344262296
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_84",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_20:Memory_20",
    "index":0.46174863387978143
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_85",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_21:Memory_21/ramsSpWf:RamInitSpWf_21",
    "index":0.4644808743169399
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_85",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_21:Memory_21",
    "index":0.4672131147540984
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_86",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_22:Memory_22/ramsSpWf:RamInitSpWf_22",
    "index":0.46994535519125685
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_86",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_22:Memory_22",
    "index":0.4726775956284153
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_87",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_23:Memory_23/ramsSpWf:RamInitSpWf_23",
    "index":0.47540983606557374
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_87",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_23:Memory_23",
    "index":0.4781420765027322
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_88",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_24:Memory_24/ramsSpWf:RamInitSpWf_24",
    "index":0.4808743169398907
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_88",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_24:Memory_24",
    "index":0.48360655737704916
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_89",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_25:Memory_25/ramsSpWf:RamInitSpWf_25",
    "index":0.48633879781420764
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_89",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_25:Memory_25",
    "index":0.4890710382513661
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_90",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_26:Memory_26/ramsSpWf:RamInitSpWf_26",
    "index":0.4918032786885246
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_90",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_26:Memory_26",
    "index":0.49453551912568305
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_91",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_27:Memory_27/ramsSpWf:RamInitSpWf_27",
    "index":0.4972677595628415
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_91",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_27:Memory_27",
    "index":0.5
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_92",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_28:Memory_28/ramsSpWf:RamInitSpWf_28",
    "index":0.5027322404371585
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_92",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_28:Memory_28",
    "index":0.505464480874317
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_93",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_29:Memory_29/ramsSpWf:RamInitSpWf_29",
    "index":0.5081967213114754
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_93",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_29:Memory_29",
    "index":0.5109289617486339
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_94",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_30:Memory_30/ramsSpWf:RamInitSpWf_30",
    "index":0.5136612021857924
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_94",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_30:Memory_30",
    "index":0.5163934426229508
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_95",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_31:Memory_31/ramsSpWf:RamInitSpWf_31",
    "index":0.5191256830601093
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_95",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_2_31:Memory_31",
    "index":0.5218579234972678
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_96",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_0:Memory/ramsSpWf:RamInitSpWf",
    "index":0.5245901639344263
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_96",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_0:Memory",
    "index":0.5273224043715847
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_97",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_1:Memory_1/ramsSpWf:RamInitSpWf_1",
    "index":0.5300546448087432
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_97",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_1:Memory_1",
    "index":0.5327868852459017
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_98",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_2:Memory_2/ramsSpWf:RamInitSpWf_2",
    "index":0.5355191256830601
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_98",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_2:Memory_2",
    "index":0.5382513661202186
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_99",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_3:Memory_3/ramsSpWf:RamInitSpWf_3",
    "index":0.5409836065573771
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_99",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_3:Memory_3",
    "index":0.5437158469945356
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_100",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_4:Memory_4/ramsSpWf:RamInitSpWf_4",
    "index":0.546448087431694
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_100",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_4:Memory_4",
    "index":0.5491803278688525
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_101",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_5:Memory_5/ramsSpWf:RamInitSpWf_5",
    "index":0.5519125683060109
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_101",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_5:Memory_5",
    "index":0.5546448087431693
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_102",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_6:Memory_6/ramsSpWf:RamInitSpWf_6",
    "index":0.5573770491803278
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_102",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_6:Memory_6",
    "index":0.5601092896174863
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_103",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_7:Memory_7/ramsSpWf:RamInitSpWf_7",
    "index":0.5628415300546448
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_103",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_7:Memory_7",
    "index":0.5655737704918032
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_104",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_8:Memory_8/ramsSpWf:RamInitSpWf_8",
    "index":0.5683060109289617
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_104",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_8:Memory_8",
    "index":0.5710382513661202
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_105",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_9:Memory_9/ramsSpWf:RamInitSpWf_9",
    "index":0.5737704918032787
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_105",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_9:Memory_9",
    "index":0.5765027322404371
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_106",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_10:Memory_10/ramsSpWf:RamInitSpWf_10",
    "index":0.5792349726775956
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_106",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_10:Memory_10",
    "index":0.5819672131147541
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_107",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_11:Memory_11/ramsSpWf:RamInitSpWf_11",
    "index":0.5846994535519126
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_107",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_11:Memory_11",
    "index":0.587431693989071
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_108",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_12:Memory_12/ramsSpWf:RamInitSpWf_12",
    "index":0.5901639344262295
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_108",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_12:Memory_12",
    "index":0.592896174863388
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_109",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_13:Memory_13/ramsSpWf:RamInitSpWf_13",
    "index":0.5956284153005464
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_109",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_13:Memory_13",
    "index":0.5983606557377049
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_110",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_14:Memory_14/ramsSpWf:RamInitSpWf_14",
    "index":0.6010928961748634
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_110",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_14:Memory_14",
    "index":0.6038251366120219
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_111",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_15:Memory_15/ramsSpWf:RamInitSpWf_15",
    "index":0.6065573770491803
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_111",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_15:Memory_15",
    "index":0.6092896174863388
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_112",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_16:Memory_16/ramsSpWf:RamInitSpWf_16",
    "index":0.6120218579234973
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_112",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_16:Memory_16",
    "index":0.6147540983606558
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_113",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_17:Memory_17/ramsSpWf:RamInitSpWf_17",
    "index":0.6174863387978142
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_113",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_17:Memory_17",
    "index":0.6202185792349727
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_114",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_18:Memory_18/ramsSpWf:RamInitSpWf_18",
    "index":0.6229508196721312
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_114",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_18:Memory_18",
    "index":0.6256830601092896
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_115",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_19:Memory_19/ramsSpWf:RamInitSpWf_19",
    "index":0.6284153005464481
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_115",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_19:Memory_19",
    "index":0.6311475409836066
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_116",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_20:Memory_20/ramsSpWf:RamInitSpWf_20",
    "index":0.6338797814207651
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_116",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_20:Memory_20",
    "index":0.6366120218579235
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_117",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_21:Memory_21/ramsSpWf:RamInitSpWf_21",
    "index":0.639344262295082
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_117",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_21:Memory_21",
    "index":0.6420765027322405
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_118",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_22:Memory_22/ramsSpWf:RamInitSpWf_22",
    "index":0.644808743169399
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_118",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_22:Memory_22",
    "index":0.6475409836065574
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_119",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_23:Memory_23/ramsSpWf:RamInitSpWf_23",
    "index":0.6502732240437158
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_119",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_23:Memory_23",
    "index":0.6530054644808743
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_120",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_24:Memory_24/ramsSpWf:RamInitSpWf_24",
    "index":0.6557377049180327
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_120",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_24:Memory_24",
    "index":0.6584699453551912
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_121",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_25:Memory_25/ramsSpWf:RamInitSpWf_25",
    "index":0.6612021857923497
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_121",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_25:Memory_25",
    "index":0.6639344262295082
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_122",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_26:Memory_26/ramsSpWf:RamInitSpWf_26",
    "index":0.6666666666666666
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_122",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_26:Memory_26",
    "index":0.6693989071038251
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_123",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_27:Memory_27/ramsSpWf:RamInitSpWf_27",
    "index":0.6721311475409836
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_123",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_27:Memory_27",
    "index":0.674863387978142
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_124",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_28:Memory_28/ramsSpWf:RamInitSpWf_28",
    "index":0.6775956284153005
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_124",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_28:Memory_28",
    "index":0.680327868852459
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_125",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_29:Memory_29/ramsSpWf:RamInitSpWf_29",
    "index":0.6830601092896175
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_125",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_29:Memory_29",
    "index":0.6857923497267759
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_126",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_30:Memory_30/ramsSpWf:RamInitSpWf_30",
    "index":0.6885245901639344
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_126",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_30:Memory_30",
    "index":0.6912568306010929
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_127",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_31:Memory_31/ramsSpWf:RamInitSpWf_31",
    "index":0.6939890710382514
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_127",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backTileMemories_3_31:Memory_31",
    "index":0.6967213114754098
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamSpWf",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferMemories_0:Memory_128/ramsSpWf:RamSpWf",
    "index":0.6994535519125683
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_128",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferMemories_0:Memory_128",
    "index":0.7021857923497268
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamSpWf_1",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferMemories_1:Memory_128/ramsSpWf:RamSpWf",
    "index":0.7049180327868853
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_129",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferMemories_1:Memory_128",
    "index":0.7076502732240437
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamSpWf_2",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferMemories_2:Memory_128/ramsSpWf:RamSpWf",
    "index":0.7103825136612022
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_130",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferMemories_2:Memory_128",
    "index":0.7131147540983607
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamSpWf_3",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferMemories_3:Memory_128/ramsSpWf:RamSpWf",
    "index":0.7158469945355191
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_131",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferMemories_3:Memory_128",
    "index":0.7185792349726776
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamSpWf_4",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferShadowMemories_0:Memory_128/ramsSpWf:RamSpWf",
    "index":0.7213114754098361
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_132",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferShadowMemories_0:Memory_128",
    "index":0.7240437158469946
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamSpWf_5",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferShadowMemories_1:Memory_128/ramsSpWf:RamSpWf",
    "index":0.726775956284153
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_133",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferShadowMemories_1:Memory_128",
    "index":0.7295081967213115
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamSpWf_6",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferShadowMemories_2:Memory_128/ramsSpWf:RamSpWf",
    "index":0.73224043715847
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_134",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferShadowMemories_2:Memory_128",
    "index":0.7349726775956285
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamSpWf_7",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferShadowMemories_3:Memory_128/ramsSpWf:RamSpWf",
    "index":0.7377049180327869
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_135",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferShadowMemories_3:Memory_128",
    "index":0.7404371584699454
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_148",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_0:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.8524590163934426
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_156",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_0:Memory_156",
    "index":0.855191256830601
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_149",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_1:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.8579234972677595
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_157",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_1:Memory_156",
    "index":0.860655737704918
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_150",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_2:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.8633879781420765
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_158",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_2:Memory_156",
    "index":0.8661202185792349
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_151",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_3:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.8688524590163934
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_159",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_3:Memory_156",
    "index":0.8715846994535519
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_152",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_4:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.8743169398907104
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_160",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_4:Memory_156",
    "index":0.8770491803278688
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_153",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_5:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.8797814207650273
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_161",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_5:Memory_156",
    "index":0.8825136612021858
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_154",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_6:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.8852459016393442
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_162",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_6:Memory_156",
    "index":0.8879781420765027
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_155",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_7:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.8907103825136612
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_163",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_7:Memory_156",
    "index":0.8934426229508197
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_156",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_8:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.8961748633879781
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_164",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_8:Memory_156",
    "index":0.8989071038251366
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_157",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_9:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.9016393442622951
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_165",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_9:Memory_156",
    "index":0.9043715846994536
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_158",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_10:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.907103825136612
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_166",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_10:Memory_156",
    "index":0.9098360655737705
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_159",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_11:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.912568306010929
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_167",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_11:Memory_156",
    "index":0.9153005464480874
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_160",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_12:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.9180327868852459
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_168",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_12:Memory_156",
    "index":0.9207650273224044
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_161",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_13:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.9234972677595629
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_169",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_13:Memory_156",
    "index":0.9262295081967213
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_162",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_14:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.9289617486338798
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_170",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_14:Memory_156",
    "index":0.9316939890710383
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamInitSpWf_163",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_15:Memory_156/ramsSpWf:RamInitSpWf_148",
    "index":0.9344262295081968
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_171",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/rotation45deg_15:Memory_156",
    "index":0.9371584699453552
  },
  {
    "class":"firrtl.EmitCircuitAnnotation",
    "emitter":"firrtl.VerilogEmitter"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_171",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_170",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_169",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_168",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_167",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_166",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_165",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_164",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_148",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_147",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_146",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_145",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_144",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_143",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_142",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_141",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_140",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_139",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_138",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_137",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_136",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_135",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_134",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_133",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_132",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_131",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_130",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_129",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_128",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamSpWf",
    "name":"RamSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8;\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_31",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_30",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_29",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_28",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_27",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_26",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_25",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_24",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_23",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_22",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_21",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_20",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_19",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_18",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_17",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_16",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_15",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_14",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_13",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_12",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_11",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_10",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_9",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_8",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_7",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_6",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_5",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_4",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_3",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_2",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_1",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\n// Authors: Luca Pezzarossa\n// Copyright: Technical University of Denmark - 2024\n// Comments:\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\n// (recommended template from AMD/Xilinx)\n//////////////////////////////////////////////////////////////////////////////\n\n`timescale 1ns / 1ps\n\nmodule RamInitSpWf ( clk,\n                    we, \n                    en, \n                    addr, \n                    di, \n                    dout);\n\n    parameter\n              ADDR_WIDTH = 8,\n              DATA_WIDTH = 8,\n              LOAD_FILE = \"\";\n\n    input clk;\n    input we;\n    input en;\n    input [ADDR_WIDTH-1:0] addr;\n    input [DATA_WIDTH-1:0] di;\n    output [DATA_WIDTH-1:0] dout;\n\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\n    reg [DATA_WIDTH-1:0] dout;\n    \n    initial begin\n        $readmemb(LOAD_FILE, RAM);\n    end\n\n    always @(posedge clk)\n        begin\n        if (en)\n            begin\n                if (we)\n                    begin\n                    RAM[addr] <= di;\n                    dout <= di;\n                    end\n                else\n                    dout <= RAM[addr];\n            end\n        end\nendmodule\n\n//////////////////////////////////////////////////////////////////////////////\n// End of file\n//////////////////////////////////////////////////////////////////////////////"
  },
  {
    "class":"firrtl.transforms.BlackBoxTargetDirAnno",
    "targetDir":"."
  }
]